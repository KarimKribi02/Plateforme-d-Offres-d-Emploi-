üöÄ PLAN DE TEST DES MICROSERVICES DE L'APPLICATION

Ce document propose un plan de test complet pour tester l'ensemble des microservices de l'application dans Postman, dans un ordre logique permettant de valider l'int√©gration compl√®te du syst√®me.

=============================================
üìã S√âQUENCE DE TEST RECOMMAND√âE
=============================================

1Ô∏è‚É£ SERVICE D'AUTHENTIFICATION (PORT 3001)
   - Cr√©er les utilisateurs (admin, recruteur, candidat)
   - Tester la connexion et obtenir les tokens JWT

2Ô∏è‚É£ SERVICE DE GESTION DES ENTREPRISES & OFFRES D'EMPLOI (PORT 8000)
   - Cr√©er et g√©rer les entreprises
   - Cr√©er et g√©rer les offres d'emploi

3Ô∏è‚É£ SERVICE DE CANDIDATURE (PORT 3002)
   - Cr√©er et g√©rer les candidatures
   - Tester les fonctionnalit√©s d'administration

4Ô∏è‚É£ SERVICE DE NOTIFICATIONS (PORT 5003)
   - V√©rifier la r√©ception des notifications
   - Consulter l'historique des notifications

=============================================
üîç TESTS D√âTAILL√âS PAR MICROSERVICE
=============================================

üåü SERVICE D'AUTHENTIFICATION (PORT 3001)
------------------------------------------

√âTAPE 1 : Cr√©ation d'un administrateur
‚û§ M√©thode : POST
URL :
```
http://localhost:3001/api/auth/create-admin
```

Body > raw > JSON :
```json
{
  "name": "Admin Principal",
  "email": "admin@example.com",
  "password": "adminpass123",
  "secretKey": "your_admin_secret_key"
}
```
‚úÖ Statut attendu : 201 Created

‚ö†Ô∏è R√âSOLUTION D'ERREUR : Si vous obtenez l'erreur "Unauthorized: Invalid secret key", vous devez utiliser la valeur correcte pour "secretKey". Cette valeur doit correspondre √† la variable d'environnement ADMIN_SECRET_KEY d√©finie dans le fichier .env du service d'authentification. 

Par d√©faut, vous pouvez essayer les valeurs suivantes :
```
secretKey: "admin123"
```
ou
```
secretKey: "admin_secret_key_for_job_platform"
```

Si ces valeurs ne fonctionnent pas, v√©rifiez le fichier .env du service d'authentification pour trouver la valeur correcte.

√âTAPE 2 : Connexion en tant qu'administrateur
‚û§ M√©thode : POST
URL :
```
http://localhost:3001/api/auth/login
```

Body > raw > JSON :
```json
{
  "email": "admin@example.com",
  "password": "adminpass123"
}
```
‚úÖ Statut attendu : 200 OK
‚ö†Ô∏è IMPORTANT : Sauvegarder le token JWT re√ßu comme variable d'environnement "admin_token"

√âTAPE 3 : Cr√©ation d'un compte recruteur
‚û§ M√©thode : POST
URL :
```
http://localhost:3001/api/auth/recruiters
```

Headers :
```
Authorization: Bearer {{admin_token}}
```

Body > raw > JSON :
```json
{
  "name": "Recruteur Test",
  "email": "recruteur@example.com",
  "password": "recruteurpass"
}
```
‚úÖ Statut attendu : 201 Created

√âTAPE 4 : V√©rification de la cr√©ation du recruteur
‚û§ M√©thode : GET
URL :
```
http://localhost:3001/api/auth/recruiters
```

Headers :
```
Authorization: Bearer {{admin_token}}
```
‚úÖ Statut attendu : 200 OK

√âTAPE 5 : Cr√©ation d'un compte candidat
‚û§ M√©thode : POST
URL :
```
http://localhost:3001/api/auth/register
```

Body > raw > JSON :
```json
{
  "name": "Candidat Test",
  "email": "candidat@example.com",
  "password": "candidatpass",
  "role": "candidat"
}
```
‚úÖ Statut attendu : 201 Created

√âTAPE 6 : Connexion en tant que recruteur
‚û§ M√©thode : POST
URL :
```
http://localhost:3001/api/auth/login
```

Body > raw > JSON :
```json
{
  "email": "recruteur@example.com",
  "password": "recruteurpass"
}
```
‚úÖ Statut attendu : 200 OK
‚ö†Ô∏è IMPORTANT : Sauvegarder le token JWT re√ßu comme variable d'environnement "recruteur_token"

√âTAPE 7 : Connexion en tant que candidat
‚û§ M√©thode : POST
URL :
```
http://localhost:3001/api/auth/login
```

Body > raw > JSON :
```json
{
  "email": "candidat@example.com",
  "password": "candidatpass"
}
```
‚úÖ Statut attendu : 200 OK
‚ö†Ô∏è IMPORTANT : Sauvegarder le token JWT re√ßu comme variable d'environnement "candidat_token"

üåü SERVICE DE GESTION DES ENTREPRISES & OFFRES D'EMPLOI (PORT 8000)
-------------------------------------------------------------------

√âTAPE 8 : Cr√©ation d'une entreprise (Recruteur uniquement)
‚û§ M√©thode : POST
URL :
```
http://localhost:8000/api/entreprises
```

Headers :
```
Authorization: Bearer {{recruteur_token}}
```

Body > raw > JSON :
```json
{
  "nom": "Entreprise Test",
  "description": "Entreprise de test pour les API",
  "secteur": "Informatique",
  "adresse": "123 Rue de Test, 75000 Paris",
  "site_web": "https://entreprise-test.com"
}
```
‚úÖ Statut attendu : 201 Created
‚ö†Ô∏è IMPORTANT : Sauvegarder l'ID de l'entreprise comme variable d'environnement "entreprise_id"

√âTAPE 9 : Cr√©ation d'une offre d'emploi (Recruteur uniquement)
‚û§ M√©thode : POST
URL :
```
http://localhost:8000/api/offres
```

Headers :
```
Authorization: Bearer {{recruteur_token}}
```

Body > raw > JSON :
```json
{
  "titre": "D√©veloppeur Full Stack",
  "description": "Nous recherchons un d√©veloppeur full stack exp√©riment√©",
  "entreprise_id": "{{entreprise_id}}",
  "localisation": "Paris",
  "type_contrat": "CDI",
  "salaire": "45000-60000‚Ç¨",
  "competences_requises": ["JavaScript", "Node.js", "React", "MongoDB"]
}
```
‚úÖ Statut attendu : 201 Created
‚ö†Ô∏è IMPORTANT : Sauvegarder l'ID de l'offre comme variable d'environnement "offre_id"

√âTAPE 10 : Consultation de toutes les offres d'emploi
‚û§ M√©thode : GET
URL :
```
http://localhost:8000/api/offres
```
‚úÖ Statut attendu : 200 OK

√âTAPE 11 : Consultation des d√©tails d'une offre
‚û§ M√©thode : GET
URL :
```
http://localhost:8000/api/offres/{{offre_id}}
```
‚úÖ Statut attendu : 200 OK

√âTAPE 12 : Recherche d'offres par crit√®res
‚û§ M√©thode : GET
URL :
```
http://localhost:8000/api/offres/recherche?localisation=Paris&type_contrat=CDI
```
‚úÖ Statut attendu : 200 OK

üåü SERVICE DE CANDIDATURE (PORT 3002)
------------------------------------

√âTAPE 13 : Cr√©ation d'une candidature par le candidat
‚û§ M√©thode : POST
URL :
```
http://localhost:3002/api/candidatures
```

Headers :
```
Authorization: Bearer {{candidat_token}}
```

Body > raw > JSON :
```json
{
  "offreId": "{{offre_id}}",
  "message": "Je suis tr√®s int√©ress√© par ce poste et j'ai les comp√©tences requises."
}
```
‚úÖ Statut attendu : 201 Created
‚ö†Ô∏è IMPORTANT : Sauvegarder l'ID de la candidature comme variable d'environnement "candidature_id"

√âTAPE 14 : Consultation des candidatures par le candidat
‚û§ M√©thode : GET
URL :
```
http://localhost:3002/api/candidatures/mine
```

Headers :
```
Authorization: Bearer {{candidat_token}}
```
‚úÖ Statut attendu : 200 OK

√âTAPE 15 : Mise √† jour du statut d'une candidature par le recruteur
‚û§ M√©thode : PUT
URL :
```
http://localhost:3002/api/candidatures/{{candidature_id}}/statut
```

Headers :
```
Authorization: Bearer {{recruteur_token}}
```

Body > raw > JSON :
```json
{
  "statut": "accept√©e"
}
```
‚úÖ Statut attendu : 200 OK

√âTAPE 16 : V√©rification du statut de la candidature par le candidat
‚û§ M√©thode : GET
URL :
```
http://localhost:3002/api/candidatures/mine
```

Headers :
```
Authorization: Bearer {{candidat_token}}
```
‚úÖ Statut attendu : 200 OK
üîç V√©rifier que le statut de la candidature est maintenant "accept√©e"

√âTAPE 17 : Consultation de toutes les offres par l'administrateur
‚û§ M√©thode : GET
URL :
```
http://localhost:3002/api/admin/offers
```

Headers :
```
Authorization: Bearer {{admin_token}}
```
‚úÖ Statut attendu : 200 OK

√âTAPE 18 : Consultation de toutes les candidatures par l'administrateur
‚û§ M√©thode : GET
URL :
```
http://localhost:3002/api/admin/candidatures
```

Headers :
```
Authorization: Bearer {{admin_token}}
```
‚úÖ Statut attendu : 200 OK

üåü SERVICE DE NOTIFICATIONS (PORT 5003)
--------------------------------------

√âTAPE 19 : V√©rification des notifications g√©n√©r√©es
‚û§ M√©thode : GET
URL :
```
http://localhost:5003/notifications
```
‚úÖ Statut attendu : 200 OK
üîç V√©rifier qu'il y a des notifications pour :
   - La cr√©ation de la candidature (pour le recruteur)
   - La mise √† jour du statut de la candidature (pour le candidat)

=============================================
üõ†Ô∏è CONFIGURATION POSTMAN
=============================================

1. Cr√©er un environnement "Job Application Platform" avec les variables suivantes :
   - admin_token
   - recruteur_token
   - candidat_token
   - entreprise_id
   - offre_id
   - candidature_id

2. Cr√©er une collection pour chaque microservice :
   - Auth Service (3001)
   - Entreprises & Offres Service (8000)
   - Candidature Service (3002)
   - Notification Service (5003)

3. Organiser les requ√™tes dans un ordre logique suivant le plan de test ci-dessus

4. Utiliser la fonction "Tests" de Postman pour automatiser la capture des tokens et IDs :
   ```javascript
   // Exemple pour capturer le token d'admin
   var jsonData = pm.response.json();
   pm.environment.set("admin_token", jsonData.token);
   
   // Exemple pour capturer l'ID de l'offre
   var jsonData = pm.response.json();
   pm.environment.set("offre_id", jsonData.id);
   ```

5. Cr√©er un "Runner" pour ex√©cuter les tests dans l'ordre s√©quentiel

=============================================
‚ö†Ô∏è TESTS D'ERREUR RECOMMAND√âS
=============================================

1. Tentative de connexion avec identifiants invalides
   ‚û§ M√©thode : POST √† /api/auth/login
   ‚û§ R√©sultat attendu : 401 Unauthorized

2. Tentative d'acc√®s aux routes prot√©g√©es sans token
   ‚û§ M√©thode : GET √† /api/candidatures/mine
   ‚û§ R√©sultat attendu : 401 Unauthorized

3. Tentative d'acc√®s aux routes admin par un utilisateur non-admin
   ‚û§ M√©thode : GET √† /api/admin/candidatures avec token candidat
   ‚û§ R√©sultat attendu : 403 Forbidden

4. Tentative de modification du statut d'une candidature par un candidat
   ‚û§ M√©thode : PUT √† /api/candidatures/{{candidature_id}}/statut avec token candidat
   ‚û§ R√©sultat attendu : 403 Forbidden

5. Tentative de cr√©ation d'une offre avec une entreprise inexistante
   ‚û§ M√©thode : POST √† /api/offres avec un entreprise_id invalide
   ‚û§ R√©sultat attendu : 400 Bad Request

6. Tentative de cr√©ation d'une candidature pour une offre inexistante
   ‚û§ M√©thode : POST √† /api/candidatures avec un offreId invalide
   ‚û§ R√©sultat attendu : 404 Not Found

=============================================
üìä R√âSUM√â DES D√âPENDANCES ENTRE SERVICES
=============================================

1. Le service d'authentification doit √™tre test√© en premier car il fournit les tokens JWT n√©cessaires pour acc√©der aux autres services.

2. Le service de gestion des entreprises et offres doit √™tre test√© avant le service de candidature, car les candidatures font r√©f√©rence aux offres d'emploi.

3. Le service de candidature d√©pend du service d'authentification pour la validation des tokens et du service d'offres pour la v√©rification des offres.

4. Le service de notifications r√©agit aux √©v√©nements des autres services (cr√©ation de candidature, mise √† jour de statut) et doit donc √™tre test√© en dernier.

5. Pour un test complet, il est recommand√© de suivre l'ordre exact des √©tapes d√©crites ci-dessus. 